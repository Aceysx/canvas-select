{"version":3,"file":"canvas-select.min.js","sources":["../src/shape/Shape.ts","../src/bridge.ts","../src/shape/Rect.ts","../src/shape/Polygon.ts","../src/shape/Dot.ts","../src/EventBus.ts","../src/index.ts"],"sourcesContent":["import { createUuid } from '../bridge'\nimport EventBus from '../EventBus'\n\nexport default class Shape {\n    public label: string = ''\n    public coor: any[] = []\n    public strokeStyle: string = ''\n    public fillStyle: string = ''\n    public type: number // 形状\n    public active: boolean = false\n    public creating: boolean = false\n    public dragging: boolean = false\n    public index: number\n    public uuid: string = createUuid()\n    constructor(index: number, label: string, strokeStyle: string, fillStyle: string, uuid: string) {\n        debugger\n        this.index = index;\n        this.label = label;\n        this.strokeStyle = strokeStyle;\n        this.fillStyle = fillStyle;\n        if (uuid) this.uuid = uuid\n    }\n}\n","/**\n * 生成uuid\n * @returns\n */\nfunction createUuid(): string {\n    const s: any[] = [];\n    const hexDigits = '0123456789abcdef';\n    for (let i = 0; i < 36; i++) {\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    }\n    s[14] = '4';\n    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);\n    s[8] = s[13] = s[18] = s[23] = '-';\n    const uuid = s.join('');\n    return uuid;\n}\nexport { createUuid }","import { Point } from '../Types';\nimport Shape from './Shape';\n\nexport default class Rect extends Shape {\n  type: number = 1\n  constructor(coor: Point[], index?: number, label?: string, strokeStyle?: string, fillStyle?: string, uuid?: string) {\n    super(index, label, strokeStyle, fillStyle, uuid)\n    this.coor = coor;\n  }\n  get ctrlsData() {\n    const [[x0, y0], [x1, y1]] = this.coor as Point[];\n    return [\n      [x0, y0],\n      [x0 + (x1 - x0) / 2, y0],\n      [x1, y0],\n      [x1, y0 + (y1 - y0) / 2],\n      [x1, y1],\n      [x0 + (x1 - x0) / 2, y1],\n      [x0, y1],\n      [x0, y0 + (y1 - y0) / 2],\n    ];\n  }\n}\n","import { Point } from '../Types';\nimport Shape from './Shape';\n\nexport default class Polygon extends Shape {\n  type: number = 2\n  constructor(coor: Point[], index?: number, label?: string, strokeStyle?: string, fillStyle?: string, uuid?: string) {\n    super(index, label, strokeStyle, fillStyle, uuid)\n    this.coor = coor;\n  }\n  get ctrlsData() {\n    return this.coor.length > 2 ? this.coor : [];\n  }\n}\n","import { Point } from '../Types';\nimport Shape from './Shape';\n\nexport default class Dot extends Shape {\n    type: number = 3\n    constructor(coor: Point, index?: number, label?: string, strokeStyle?: string, fillStyle?: string, uuid?: string) {\n        super(index, label, strokeStyle, fillStyle, uuid)\n        this.coor = coor;\n    }\n}\n","export default class EventBus {\n    public _eventTree: Record<string, any> = {}\n    /**\n   * 注册事件\n   * @param eventName 事件名称\n   * @param cb 回调方法\n   */\n    on(eventName: string, cb: Function) {\n        const fns = this._eventTree[eventName];\n        if (Array.isArray(fns)) {\n            fns.push(cb);\n        } else {\n            this._eventTree[eventName] = [cb];\n        }\n    }\n\n    /**\n     * 触发事件\n     * @param eventName 事件名称\n     * @param payload 传递参数\n     */\n    emit(eventName: string, ...payload: any) {\n        const fns = this._eventTree[eventName];\n        if (Array.isArray(fns)) {\n            fns.forEach((fn) => fn(...payload));\n        }\n    }\n\n    /**\n     * 注销事件\n     * @param eventName 事件名称\n     * @param cb 传递参数\n     */\n    off(eventName: string, cb: Function) {\n        const fns = this._eventTree[eventName];\n        const index = fns.find((fn: Function) => fn === cb);\n        if (Array.isArray(fns) && index) {\n            fns.splice(index, 1);\n        }\n    }\n}\n","import Rect from './shape/Rect';\nimport Polygon from './shape/Polygon';\nimport Dot from './shape/Dot';\nimport { Point } from './Types';\nimport EventBus from './EventBus';\n\nexport default class CanvasSelect extends EventBus {\n    lock: boolean = false // 只读模式\n\n    MIN_WIDTH: number = 10\n\n    MIN_HEIGHT: number = 10\n\n    strokeStyle = 'rgb(0, 0, 255)'\n\n    fillStyle = 'rgba(0, 0, 255,0.1)'\n\n    activeStrokeStyle = '#f00'\n\n    activeFillStyle = 'rgba(255, 0, 0,0.1)'\n\n    ctrlStrokeStyle = '#000'\n\n    ctrlFillStyle = '#fff'\n\n    ctrlRadius = 3\n\n    labelFillStyle = '#fff'\n\n    labelFont = '12px serif #000'\n\n    labelMaxLen = 5\n\n    WIDTH: number\n\n    HEIGHT: number\n\n    canvas: HTMLCanvasElement\n\n    ctx: CanvasRenderingContext2D\n\n    dataset: Array<Rect | Polygon | Dot> = []\n\n    offlineCanvas: HTMLCanvasElement\n\n    offlineCtx: CanvasRenderingContext2D\n\n    remmber: number[][] // 记录锚点距离\n\n    movePoint: Point // 记录鼠标位置\n\n    remmberOrigin: number[] = [0, 0] // 记录背景图鼠标位移\n\n    createType: number = 0 // 0 不创建，1 创建矩形，2 创建多边形，3 创建点\n\n    ctrlIndex: number = -1\n\n    cursor: string = 'auto'\n\n    image: HTMLImageElement = new Image()\n\n    imageLoaded: false\n\n    IMAGE_ORIGIN_WIDTH: number;\n\n    IMAGE_WIDTH: number;\n\n    IMAGE_ORIGIN_HEIGHT: number;\n\n    IMAGE_HEIGHT: number;\n\n    originX: number = 0; // 原点x\n\n    originY: number = 0; // 原点y\n\n    scaleStep: number = 0; // 缩放步长\n\n    canStart: Promise<any>\n\n    constructor(el: HTMLCanvasElement | string, imgSrc?: string) {\n        super()\n        const container = typeof el === 'string' ? document.querySelector(el) : el;\n        if (Object.prototype.toString.call(container).includes('HTMLCanvasElement')) {\n            this.canvas = container as HTMLCanvasElement;\n            this.ctx = this.canvas.getContext('2d');\n            this.WIDTH = this.canvas.clientWidth;\n            this.HEIGHT = this.canvas.clientHeight;\n            this.offlineCanvas = document.createElement('canvas');\n            this.offlineCanvas.width = this.WIDTH;\n            this.offlineCanvas.height = this.HEIGHT;\n            this.offlineCtx = this.offlineCanvas.getContext('2d');\n            this.initScreen();\n            if (imgSrc) this.image.src = imgSrc;\n        } else {\n            console.warn('HTMLCanvasElement is required!');\n        }\n    }\n\n    get activeShape() {\n        return this.dataset.find(x => x.active);\n    }\n\n    get scale() {\n        if (this.IMAGE_ORIGIN_WIDTH && this.IMAGE_WIDTH) {\n            return this.IMAGE_WIDTH / this.IMAGE_ORIGIN_WIDTH;\n        }\n        return 1;\n    }\n    /**\n     * 初始化\n     */\n    initScreen() {\n        this.canvas.style.userSelect = 'none';\n        this.canStart = new Promise((resolve) => {\n            if (this.imageLoaded) {\n                resolve(true)\n            } else {\n                this.image.addEventListener('load', () => {\n                    this.emit('load');\n                    this.IMAGE_ORIGIN_WIDTH = this.IMAGE_WIDTH = this.image.width;\n                    this.IMAGE_ORIGIN_HEIGHT = this.IMAGE_HEIGHT = this.image.height;\n                    this.fitZoom();\n                    resolve(true)\n                });\n            }\n        })\n\n        this.canvas.addEventListener('contextmenu', (e) => {\n            if (this.lock) return;\n            e.preventDefault();\n        });\n        this.canvas.addEventListener('mousewheel', (e: WheelEvent) => {\n            if (this.lock) return;\n            e.preventDefault();\n            this.setScale(e.deltaY < 0);\n            const offsetX = e.offsetX / this.scale;\n            const offsetY = e.offsetY / this.scale;\n            this.movePoint = [offsetX, offsetY];\n            this.update()\n        });\n        this.canvas.addEventListener('mousedown', (e: MouseEvent) => {\n            const offsetX = e.offsetX / this.scale;\n            const offsetY = e.offsetY / this.scale;\n            const mousePoint: Point = [e.offsetX, e.offsetY];\n            if (this.lock) return;\n            if (e.buttons === 2) { // 点击鼠标右键\n                this.remmberOrigin = [e.offsetX - this.originX, e.offsetY - this.originY];\n            } else if (e.buttons === 1) {\n                // 点击到控制点\n                const activeShape = this.activeShape;\n                // @ts-ignore\n                const ctrls = activeShape?.ctrlsData || [];\n                this.ctrlIndex = ctrls.findIndex((coor: Point) => this.isPointInCircle(mousePoint, coor, this.ctrlRadius));\n                if (this.ctrlIndex > -1) {\n                    const [x0, y0] = ctrls[this.ctrlIndex];\n                    this.remmber = [[offsetX - x0, offsetY - y0]];\n                    return;\n                }\n                // 是否点击到形状\n                const [targetShapeIndex, targetShape] = this.hoverOnShape(mousePoint);\n                const oncreating = this.activeShape?.type === 2 && (this.activeShape as Polygon).creating;\n                if (!oncreating && targetShapeIndex > -1) {\n                    this.emit('select', targetShape)\n                    this.dataset.forEach((item, i) => {\n                        item.active = i === targetShapeIndex;\n                    });\n                    targetShape.dragging = true;\n                    this.dataset.splice(targetShapeIndex, 1);\n                    this.dataset.push(targetShape);\n                    this.remmber = [];\n                    if (targetShape.type === 3) {\n                        const [x, y] = (targetShape as Dot).coor;\n                        this.remmber = [[offsetX - x, offsetY - y]];\n                    } else {\n                        targetShape.coor.forEach((pt: any) => {\n                            this.remmber.push([offsetX - pt[0], offsetY - pt[1]]);\n                        });\n                    }\n                    this.update();\n                } else if (oncreating) {\n                    // 多边形新增点\n                    if (this.isInContent(e)) {\n                        const pShape = this.activeShape as Polygon;\n                        const [x, y] = pShape.coor[pShape.coor.length - 1];\n                        if (x !== offsetX && y !== offsetY) {\n                            pShape.coor.push([offsetX - this.originX / this.scale, offsetY - this.originY / this.scale]);\n                            this.update();\n                        }\n                    }\n                } else if (this.createType && this.isInContent(e)) {\n                    // 创建矩形/多边形\n                    let newShape;\n                    const curPoint: Point = [offsetX - this.originX / this.scale, offsetY - this.originY / this.scale];\n                    if (this.createType === 1) {\n                        newShape = new Rect([curPoint, curPoint], this.dataset.length);\n                        newShape.creating = true;\n                    } else if (this.createType === 2) {\n                        newShape = new Polygon([curPoint], this.dataset.length);\n                        newShape.creating = true;\n                    } else if (this.createType === 3) {\n                        newShape = new Dot(curPoint, this.dataset.length);\n                        this.emit('add', newShape)\n                    }\n                    this.dataset.forEach((sp) => { sp.active = false; });\n                    newShape.active = true;\n                    this.dataset.push(newShape);\n                    this.emit('updated', newShape)\n                    this.update();\n                } else if (this.activeShape) {\n                    this.activeShape.active = false;\n                    this.update();\n                }\n            }\n        });\n        this.canvas.addEventListener('mousemove', (e: MouseEvent) => {\n            const offsetX = e.offsetX / this.scale;\n            const offsetY = e.offsetY / this.scale;\n            if (this.lock) return;\n            // 记录鼠标位置\n            this.movePoint = [offsetX, offsetY];\n            if (e.buttons === 2 && e.which === 3) {\n                // 拖动背景\n                this.originX = e.offsetX - this.remmberOrigin[0];\n                this.originY = e.offsetY - this.remmberOrigin[1];\n                this.update();\n            } else if (e.buttons === 1) {\n                if (this.activeShape) {\n                    if (this.ctrlIndex > -1 && this.isInContent(e)) {\n                        const [[x, y]] = this.remmber;\n                        // resize矩形\n                        if (this.activeShape.type === 1) {\n                            const [[x0, y0], [x1, y1]] = (this.activeShape as Rect).coor;\n                            let coor: Point[] = [];\n                            switch (this.ctrlIndex) {\n                                case 0:\n                                    coor = [[offsetX - x, offsetY - y], [x1, y1]];\n                                    break;\n                                case 1:\n                                    coor = [[x0, offsetY - y], [x1, y1]];\n                                    break;\n                                case 2:\n                                    coor = [[x0, offsetY - y], [offsetX - x, y1]];\n                                    break;\n                                case 3:\n                                    coor = [[x0, y0], [offsetX - x, y1]];\n                                    break;\n                                case 4:\n                                    coor = [[x0, y0], [offsetX - x, offsetY - y]];\n                                    break;\n                                case 5:\n                                    coor = [[x0, y0], [x1, offsetY - y]];\n                                    break;\n                                case 6:\n                                    coor = [[offsetX - x, y0], [x1, offsetY - y]];\n                                    break;\n                                case 7:\n                                    coor = [[offsetX - x, y0], [x1, y1]];\n                                    break;\n                                default:\n                                    break;\n                            }\n                            const [[a0, b0], [a1, b1]] = coor;\n                            if ((a1 - a0) >= this.MIN_WIDTH && (b1 - b0) >= this.MIN_HEIGHT) {\n                                this.activeShape.coor = coor;\n                            } else {\n                                this.emit('error', `宽不能小于${this.MIN_WIDTH},高不能小于${this.MIN_HEIGHT}。`);\n                            }\n                        } else if (this.activeShape.type === 2) {\n                            this.activeShape.coor.splice(this.ctrlIndex, 1, [offsetX - this.originX / this.scale, offsetY - this.originY / this.scale]);\n                        }\n                        this.update();\n                    } else if (this.activeShape.dragging) {\n                        let coor = [];\n                        const w = this.IMAGE_ORIGIN_WIDTH || this.WIDTH;\n                        const h = this.IMAGE_ORIGIN_HEIGHT || this.HEIGHT;\n                        if (this.activeShape.type === 3) {\n                            const [t1, t2] = this.remmber[0];\n                            const x = offsetX - t1;\n                            const y = offsetY - t2;\n                            if (x < 0 || x > w || y < 0 || y > h) return;\n                            coor = [x, y];\n                        } else {\n                            for (let i = 0; i < this.activeShape.coor.length; i++) {\n                                const tar = this.remmber[i];\n                                const x = offsetX - tar[0];\n                                const y = offsetY - tar[1];\n                                if (x < 0 || x > w || y < 0 || y > h) return;\n                                coor.push([x, y]);\n                            }\n                        }\n                        (this.activeShape as any).coor = coor;\n                        this.update();\n                    } else if ((this.activeShape as Rect).creating && this.activeShape.type === 1 && this.isInContent(e)) {\n                        const x = offsetX - this.originX / this.scale;\n                        const y = offsetY - this.originY / this.scale;\n                        this.activeShape.coor.splice(1, 1, [x, y]);\n                    }\n                    this.emit('updated', this.activeShape)\n                }\n                this.update();\n            } else if (this.activeShape?.type === 2 && (this.activeShape as Polygon)?.creating) {\n                this.update();\n            }\n        });\n        this.canvas.addEventListener('mouseup', (e) => {\n            if (this.lock) return;\n            this.remmber = [];\n            if (this.activeShape) {\n                this.activeShape.dragging = false;\n                if ((this.activeShape as Rect).creating && this.activeShape.type === 1) {\n                    const [[x0, y0], [x1, y1]] = (this.activeShape as Rect).coor;\n                    if (Math.abs(x0 - x1) < this.MIN_WIDTH || Math.abs(y0 - y1) < this.MIN_HEIGHT) {\n                        this.dataset.pop();\n                        this.emit('error', `宽不能小于${this.MIN_WIDTH},高不能小于${this.MIN_HEIGHT}`);\n                    } else {\n                        this.activeShape.coor = [[Math.min(x0, x1), Math.min(y0, y1)], [Math.max(x0, x1), Math.max(y0, y1)]];\n                        (this.activeShape as Rect).creating = false;\n                        this.emit('add', this.activeShape);\n                    }\n                    this.update();\n                }\n            }\n        });\n        this.canvas.addEventListener('dblclick', () => {\n            if (this.lock) return;\n            if (this.activeShape?.type === 2) {\n                if (this.activeShape.coor.length > 2) {\n                    this.emit('add', this.activeShape);\n                    (this.activeShape as Polygon).creating = false;\n                    this.update();\n                }\n            }\n        });\n        document.body.addEventListener('keyup', (e: KeyboardEvent) => {\n            if (this.lock) return;\n            if (this.activeShape) {\n                if (this.activeShape.type === 2) {\n                    if (e.key === 'Escape') {\n                        this.deleteByIndex(this.activeShape.index);\n                    } else if (e.key === 'Backspace') {\n                        if (this.activeShape.coor.length > 1 && (this.activeShape as Polygon).creating) {\n                            this.activeShape.coor.pop();\n                        } else {\n                            this.deleteByIndex(this.activeShape.index);\n                        }\n                    }\n                    this.update();\n                } else if (this.activeShape && e.key === 'Backspace') {\n                    this.deleteByIndex(this.activeShape.index);\n                }\n            }\n\n        });\n    }\n    /**\n     * 设置数据\n     * @param data Array\n     */\n    async setData(data: any[]) {\n        try {\n            await this.canStart\n            data.forEach((item, index) => {\n                if (Object.prototype.toString.call(item).indexOf('Object') > -1) {\n                    const { label, type, coor, strokeStyle, fillStyle, uuid } = item;\n                    let shape\n                    switch (type) {\n                        case 1:\n                            shape = new Rect(coor, index, label, strokeStyle, fillStyle, uuid);\n                            break;\n                        case 2:\n                            shape = new Polygon(coor, index, label, strokeStyle, fillStyle, uuid);\n                            break;\n                        case 3:\n                            shape = new Dot(coor, index, label, strokeStyle, fillStyle, uuid);\n                            break;\n                        default:\n                            break;\n                    }\n                    this.dataset.push(shape);\n                } else {\n                    this.emit('error', `${item} in data must be an enumerable Object.`);\n                }\n            });\n            this.update();\n        } catch (error) {\n            this.emit('error', error);\n        }\n    }\n    /**\n     * 判断是非在标注实例上\n     * @param mousePoint 点击位置\n     * @returns \n     */\n    hoverOnShape(mousePoint: Point): [number, Rect | Polygon | Dot] {\n        let targetShapeIndex = -1;\n        const targetShape = this.dataset.reduceRight((target, shape, i) => {\n            if (!target) {\n                if (\n                    (shape.type === 3 && this.isPointInCircle(mousePoint, shape.coor as Point, 3))\n                    || (shape.type === 1 && this.isPointInRect(mousePoint, (shape as Rect).coor))\n                    || (shape.type === 2 && this.isPointInPolygon(mousePoint, (shape as Polygon).coor))\n                ) {\n                    targetShapeIndex = i;\n                    target = shape;\n                }\n            }\n            return target;\n        }, null);\n        return [targetShapeIndex, targetShape];\n    }\n\n    /**\n     * 判断鼠标是否在背景图内部\n     * @param e MouseEvent\n     * @returns 布尔值\n     */\n    isInContent(e: MouseEvent): boolean {\n        const offsetX = e.offsetX / this.scale;\n        const offsetY = e.offsetY / this.scale;\n        return offsetX >= this.originX / this.scale && offsetY >= this.originY / this.scale\n            && offsetX <= this.originX / this.scale + this.IMAGE_ORIGIN_WIDTH && offsetY <= this.originY / this.scale + this.IMAGE_ORIGIN_HEIGHT;\n    }\n    /**\n     * 判断是否在矩形内\n     * @param point 坐标\n     * @param coor 区域坐标\n     * @returns 布尔值\n     */\n    isPointInRect(point: Point, coor: Point[]): boolean {\n        const [x, y] = point;\n        const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\n        return x0 + this.originX <= x && x <= x1 + this.originX && y0 + this.originY <= y && y <= y1 + this.originY;\n    }\n    /**\n     * 判断是否在多边形内\n     * @param point 坐标\n     * @param coor 区域坐标\n     * @returns 布尔值\n     */\n    isPointInPolygon(point: Point, coor: Point[]): boolean {\n        this.offlineCtx.save();\n        this.offlineCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\n        this.offlineCtx.translate(this.originX, this.originY);\n        this.offlineCtx.beginPath();\n        coor.forEach((pt, i) => {\n            const [x, y] = pt.map((a) => Math.round(a * this.scale));\n            if (i === 0) {\n                this.offlineCtx.moveTo(x, y);\n            } else {\n                this.offlineCtx.lineTo(x, y);\n            }\n        });\n        this.offlineCtx.closePath();\n        this.offlineCtx.fill();\n        const areaData = this.offlineCtx.getImageData(0, 0, this.WIDTH, this.HEIGHT);\n        const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\n        this.offlineCtx.restore();\n        return areaData.data[index + 3] !== 0;\n    }\n    /**\n     * 判断是否在圆内\n     * @param point 坐标\n     * @param center 圆心\n     * @param r 半径\n     * @returns 布尔值\n     */\n    isPointInCircle(point: Point, center: Point, r: number): boolean {\n        const [x, y] = point;\n        const [x0, y0] = center.map((a) => a * this.scale);\n        const distance = Math.sqrt((x0 + this.originX - x) ** 2 + (y0 + this.originY - y) ** 2);\n        return distance <= r;\n    }\n    /**\n     * 绘制矩形\n     * @param shape 标注实例\n     * @returns \n     */\n    drawRect(shape: Rect) {\n        if (shape.coor.length !== 2) return;\n        const [[x0, y0], [x1, y1]] = shape.coor.map((a: Point) => a.map((b) => Math.round(b * this.scale)));\n        this.ctx.save();\n        this.ctx.fillStyle = shape.fillStyle || this.fillStyle;\n        this.ctx.strokeStyle = (shape.active || shape.creating) ? this.activeStrokeStyle : (shape.strokeStyle || this.strokeStyle);\n        const w = x1 - x0;\n        const h = y1 - y0;\n        this.ctx.strokeRect(x0, y0, w, h);\n        if (!shape.creating) this.ctx.fillRect(x0, y0, w, h);\n        this.ctx.restore();\n        this.drawLabel(shape.coor[0], shape.label);\n    }\n    /**\n     * 绘制多边形\n     * @param shape 标注实例\n     */\n    drawPolygon(shape: Polygon) {\n        this.ctx.save();\n        this.ctx.fillStyle = shape.fillStyle || this.fillStyle;\n        this.ctx.strokeStyle = (shape.active || shape.creating) ? this.activeStrokeStyle : (shape.strokeStyle || this.strokeStyle);\n        this.ctx.beginPath();\n        shape.coor.forEach((el: Point, i) => {\n            const [x, y] = el.map((a) => Math.round(a * this.scale));\n            if (i === 0) {\n                this.ctx.moveTo(x, y);\n            } else {\n                this.ctx.lineTo(x, y);\n            }\n        });\n        if (shape.creating) {\n            const [x, y] = this.movePoint.map((a) => Math.round(a * this.scale));\n            this.ctx.lineTo(x - this.originX, y - this.originY);\n        } else if (shape.coor.length > 2) {\n            this.ctx.closePath();\n        }\n        this.ctx.fill();\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.drawLabel(shape.coor[0], shape.label);\n    }\n    /**\n     * 绘制点\n     * @param shape 标注实例\n     */\n    drawDot(shape: Dot) {\n        const [x, y] = shape.coor.map((a) => a * this.scale);\n        this.ctx.save();\n        this.ctx.fillStyle = shape.fillStyle || this.ctrlFillStyle;\n        this.ctx.strokeStyle = shape.active ? this.activeStrokeStyle : (shape.strokeStyle || this.strokeStyle);\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.fill();\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.drawLabel(shape.coor as Point, shape.label);\n    }\n    /**\n     * 绘制控制点\n     * @param point 坐标\n     */\n    drawCtrl(point: Point) {\n        const [x, y] = point.map((a) => a * this.scale);\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.ctrlFillStyle;\n        this.ctx.strokeStyle = this.ctrlStrokeStyle;\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.fill();\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * 绘制控制点列表\n     * @param shape 标注实例\n     */\n    drawCtrlList(shape: Rect | Polygon) {\n        shape.ctrlsData.forEach((point) => {\n            this.drawCtrl(point);\n        });\n    }\n    /**\n     * 绘制label\n     * @param point 位置\n     * @param label 文本\n     */\n    drawLabel(point: Point, label: string = '') {\n        if (label.length) {\n            const newStr = label.length < this.labelMaxLen + 1 ? label : (`${label.substr(0, this.labelMaxLen)}...`);\n            const text = this.ctx.measureText(newStr);\n            const [x, y] = point.map((a) => a * this.scale);\n            const toleft = (this.IMAGE_ORIGIN_WIDTH - point[0]) < (text.width + 4) / this.scale;\n            const toTop = (this.IMAGE_ORIGIN_HEIGHT - point[1]) < 16 / this.scale;\n            this.ctx.save();\n            this.ctx.fillStyle = this.labelFillStyle;\n            this.ctx.fillRect(toleft ? (x - text.width - 3) : (x + 1), toTop ? (y - 15) : y + 1, text.width + 4, 16);\n            this.ctx.font = this.labelFont;\n            this.ctx.strokeText(newStr, toleft ? (x - text.width - 2) : (x + 2), toTop ? (y - 4) : y + 12, 80);\n            this.ctx.restore();\n        }\n    }\n\n    /**\n     * 绘制背景图片\n     */\n    paintImage() {\n        this.ctx.drawImage(this.image, 0, 0, this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\n    }\n\n    clear() {\n        this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\n    }\n\n    /**\n     * 更新画布\n     */\n    update() {\n        this.ctx.save();\n        this.clear();\n        this.ctx.translate(this.originX, this.originY);\n        this.paintImage();\n        this.dataset.forEach((shape) => {\n            switch (shape.type) {\n                case 1:\n                    this.drawRect(shape as Rect);\n                    break;\n                case 2:\n                    this.drawPolygon(shape as Polygon);\n                    break;\n                case 3:\n                    this.drawDot(shape as Dot);\n                    break;\n                default:\n                    break;\n            }\n        });\n        if (this.activeShape && [1, 2].includes(this.activeShape.type)) {\n            this.drawCtrlList(this.activeShape as Rect | Polygon);\n        }\n        this.ctx.restore();\n    }\n\n    /**\n     * 删除指定矩形\n     * @param index number\n     */\n    deleteByIndex(index: number) {\n        const num = this.dataset.findIndex((x) => x.index === index);\n        if (num > -1) {\n            this.emit('delete', this.dataset[num]);\n            this.dataset.splice(num, 1);\n            this.dataset.forEach((item, i) => { item.index = i; });\n            this.update();\n        }\n    }\n\n    /**\n     * 计算缩放步长\n     * @param init 是否为init\n     */\n    calcStep(init?: boolean) {\n        if (init) {\n            this.scaleStep = 100;\n            this.setScale(false);\n        }\n        if (this.IMAGE_WIDTH > this.WIDTH || this.IMAGE_HEIGHT > this.HEIGHT) {\n            this.setScale(false);\n            this.calcStep();\n        }\n    }\n\n    /**\n     * 缩放\n     * @param type true放大，false，缩小\n     */\n    setScale(type: boolean) {\n        if (this.lock) return;\n        if ((!type && this.IMAGE_WIDTH <= 20) || (type && this.IMAGE_WIDTH >= this.WIDTH * 100)) return;\n        if (type) { this.scaleStep++; } else { this.scaleStep--; }\n        const abs = Math.abs(this.scaleStep);\n        const width = this.IMAGE_WIDTH;\n        this.IMAGE_WIDTH = Math.round(this.IMAGE_ORIGIN_WIDTH * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs);\n        this.IMAGE_HEIGHT = Math.round(this.IMAGE_ORIGIN_HEIGHT * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs);\n        this.stayPosition(this.IMAGE_WIDTH / width);\n        this.update();\n    }\n\n    /**\n     * 适配背景图\n     */\n    fitZoom() {\n        this.calcStep(true);\n        if (this.IMAGE_HEIGHT / this.IMAGE_WIDTH >= this.HEIGHT / this.WIDTH) {\n            this.IMAGE_WIDTH = this.IMAGE_ORIGIN_WIDTH / (this.IMAGE_ORIGIN_HEIGHT / this.HEIGHT);\n            this.IMAGE_HEIGHT = this.HEIGHT;\n        } else {\n            this.IMAGE_WIDTH = this.WIDTH;\n            this.IMAGE_HEIGHT = this.IMAGE_ORIGIN_HEIGHT / (this.IMAGE_ORIGIN_WIDTH / this.WIDTH);\n        }\n        this.originX = (this.WIDTH - this.IMAGE_WIDTH) / 2;\n        this.originY = (this.HEIGHT - this.IMAGE_HEIGHT) / 2;\n        this.update();\n    }\n\n    /**\n     * 保持缩放中心\n     * @param scale nummer\n     */\n    stayPosition(scale: number) {\n        this.originX = this.WIDTH / 2 - (this.WIDTH / 2 - this.originX) * scale;\n        this.originY = this.HEIGHT / 2 - (this.HEIGHT / 2 - this.originY) * scale;\n    }\n}\n\n"],"names":["Shape","index","label","strokeStyle","fillStyle","uuid","this","coor","active","creating","dragging","s","hexDigits","i","substr","Math","floor","random","join","createUuid","Rect","_super","_this","call","type","__extends","Object","defineProperty","prototype","get","_a","__read","_b","x0","y0","_c","x1","y1","Polygon","length","Dot","EventBus","_eventTree","on","eventName","cb","fns","Array","isArray","push","emit","payload","_i","arguments","forEach","fn","apply","__spreadArray","off","find","splice","CanvasSelect","el","imgSrc","lock","MIN_WIDTH","MIN_HEIGHT","activeStrokeStyle","activeFillStyle","ctrlStrokeStyle","ctrlFillStyle","ctrlRadius","labelFillStyle","labelFont","labelMaxLen","dataset","remmberOrigin","createType","ctrlIndex","cursor","image","Image","originX","originY","scaleStep","container","document","querySelector","toString","includes","canvas","ctx","getContext","WIDTH","clientWidth","HEIGHT","clientHeight","offlineCanvas","createElement","width","height","offlineCtx","initScreen","src","console","warn","x","IMAGE_ORIGIN_WIDTH","IMAGE_WIDTH","style","userSelect","canStart","Promise","resolve","imageLoaded","addEventListener","IMAGE_ORIGIN_HEIGHT","IMAGE_HEIGHT","fitZoom","e","preventDefault","setScale","deltaY","offsetX","scale","offsetY","movePoint","update","mousePoint","buttons","activeShape","ctrls","ctrlsData","findIndex","isPointInCircle","remmber","hoverOnShape","targetShapeIndex_1","targetShape","oncreating","item","_d","y","pt","isInContent","pShape","_e","newShape","curPoint","sp","which","_f","_g","_h","_j","a0","b0","_k","a1","b1","concat","w","h","_l","t1","tar","abs","pop","min","max","body","key","deleteByIndex","setData","data","sent","indexOf","shape","error_1","targetShapeIndex","reduceRight","target","isPointInRect","isPointInPolygon","point","map","a","b","save","clearRect","translate","beginPath","round","moveTo","lineTo","closePath","fill","areaData","getImageData","restore","center","r","sqrt","pow","drawRect","strokeRect","fillRect","drawLabel","drawPolygon","stroke","drawDot","arc","PI","drawCtrl","drawCtrlList","newStr","text","measureText","toleft","toTop","font","strokeText","paintImage","drawImage","clear","num","calcStep","init","stayPosition"],"mappings":"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"}