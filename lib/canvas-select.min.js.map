{"version":3,"file":"canvas-select.min.js","sources":["../src/shape/Shape.ts","../src/bridge.ts","../src/shape/Rect.ts","../src/shape/Polygon.ts","../src/shape/Dot.ts","../src/EventBus.ts","../src/index.ts"],"sourcesContent":["import { createUuid } from '../bridge'\nimport EventBus from '../EventBus'\n\nexport default class Shape {\n    public label: string = ''\n    public coor: any[] = []\n    public strokeStyle: string = ''\n    public fillStyle: string = ''\n    public labelFillStyle: string = ''\n    public labelFont: string = ''\n    public type: number // 形状\n    public active: boolean = false\n    public creating: boolean = false\n    public dragging: boolean = false\n    public index: number\n    public uuid: string = createUuid()\n    constructor(index: number, label: string, style: Record<string, any>, uuid: string) {\n        const { strokeStyle, fillStyle, labelFillStyle, labelFont } = style\n        this.index = index;\n        this.label = label;\n        this.strokeStyle = strokeStyle;\n        this.fillStyle = fillStyle;\n        this.labelFillStyle = labelFillStyle;\n        this.labelFont = labelFont;\n        if (uuid) this.uuid = uuid\n    }\n}\n","/**\n * 生成uuid\n * @returns\n */\nfunction createUuid(): string {\n    const s: any[] = [];\n    const hexDigits = '0123456789abcdef';\n    for (let i = 0; i < 36; i++) {\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    }\n    s[14] = '4';\n    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);\n    s[8] = s[13] = s[18] = s[23] = '-';\n    const uuid = s.join('');\n    return uuid;\n}\nexport { createUuid }","import { Point } from '../Types';\nimport Shape from './Shape';\n\nexport default class Rect extends Shape {\n  type: number = 1\n  constructor(coor: Point[], index?: number, label?: string, style = {}, uuid?: string) {\n    super(index, label, style, uuid)\n    this.coor = coor;\n  }\n  get ctrlsData() {\n    const [[x0, y0], [x1, y1]] = this.coor as Point[];\n    return [\n      [x0, y0],\n      [x0 + (x1 - x0) / 2, y0],\n      [x1, y0],\n      [x1, y0 + (y1 - y0) / 2],\n      [x1, y1],\n      [x0 + (x1 - x0) / 2, y1],\n      [x0, y1],\n      [x0, y0 + (y1 - y0) / 2],\n    ];\n  }\n}\n","import { Point } from '../Types';\nimport Shape from './Shape';\n\nexport default class Polygon extends Shape {\n  type: number = 2\n  constructor(coor: Point[], index?: number, label?: string, style = {}, uuid?: string) {\n    super(index, label, style, uuid)\n    this.coor = coor;\n  }\n  get ctrlsData() {\n    return this.coor.length > 2 ? this.coor : [];\n  }\n}\n","import { Point } from '../Types';\nimport Shape from './Shape';\n\nexport default class Dot extends Shape {\n    type: number = 3\n    constructor(coor: Point, index?: number, label?: string, style = {}, uuid?: string) {\n        super(index, label, style, uuid)\n        this.coor = coor;\n    }\n}\n","export default class EventBus {\n    public _eventTree: Record<string, any> = {}\n    /**\n   * 注册事件\n   * @param eventName 事件名称\n   * @param cb 回调方法\n   */\n    on(eventName: string, cb: Function) {\n        const fns = this._eventTree[eventName];\n        if (Array.isArray(fns)) {\n            fns.push(cb);\n        } else {\n            this._eventTree[eventName] = [cb];\n        }\n    }\n\n    /**\n     * 触发事件\n     * @param eventName 事件名称\n     * @param payload 传递参数\n     */\n    emit(eventName: string, ...payload: any) {\n        const fns = this._eventTree[eventName];\n        if (Array.isArray(fns)) {\n            fns.forEach((fn) => fn(...payload));\n        }\n    }\n\n    /**\n     * 注销事件\n     * @param eventName 事件名称\n     * @param cb 传递参数\n     */\n    off(eventName: string, cb: Function) {\n        const fns = this._eventTree[eventName];\n        const index = fns.find((fn: Function) => fn === cb);\n        if (Array.isArray(fns) && index) {\n            fns.splice(index, 1);\n        }\n    }\n}\n","import Rect from './shape/Rect';\nimport Polygon from './shape/Polygon';\nimport Dot from './shape/Dot';\nimport { Point } from './Types';\nimport EventBus from './EventBus';\n\nexport default class CanvasSelect extends EventBus {\n    lock: boolean = false // 只读模式\n\n    MIN_WIDTH: number = 10\n\n    MIN_HEIGHT: number = 10\n\n    strokeStyle = 'rgb(0, 0, 255)'\n\n    fillStyle = 'rgba(0, 0, 255,0.1)'\n\n    activeStrokeStyle = '#f00'\n\n    activeFillStyle = 'rgba(255, 0, 0,0.1)'\n\n    ctrlStrokeStyle = '#000'\n\n    ctrlFillStyle = '#fff'\n\n    ctrlRadius = 3\n\n    labelFillStyle = '#fff'\n\n    labelFont = '12px serif #000'\n\n    labelMaxLen = 5\n\n    WIDTH: number\n\n    HEIGHT: number\n\n    canvas: HTMLCanvasElement\n\n    ctx: CanvasRenderingContext2D\n\n    dataset: Array<Rect | Polygon | Dot> = []\n\n    offlineCanvas: HTMLCanvasElement\n\n    offlineCtx: CanvasRenderingContext2D\n\n    remmber: number[][] // 记录锚点距离\n\n    movePoint: Point // 记录鼠标位置\n\n    remmberOrigin: number[] = [0, 0] // 记录背景图鼠标位移\n\n    createType: number = 0 // 0 不创建，1 创建矩形，2 创建多边形，3 创建点\n\n    ctrlIndex: number = -1\n\n    cursor: string = 'auto'\n\n    image: HTMLImageElement = new Image()\n\n    imageLoaded: false\n\n    IMAGE_ORIGIN_WIDTH: number;\n\n    IMAGE_WIDTH: number;\n\n    IMAGE_ORIGIN_HEIGHT: number;\n\n    IMAGE_HEIGHT: number;\n\n    originX: number = 0; // 原点x\n\n    originY: number = 0; // 原点y\n\n    scaleStep: number = 0; // 缩放步长\n\n    canStart: Promise<any>\n\n    constructor(el: HTMLCanvasElement | string, imgSrc?: string) {\n        super()\n        const container = typeof el === 'string' ? document.querySelector(el) : el;\n        if (Object.prototype.toString.call(container).includes('HTMLCanvasElement')) {\n            this.canvas = container as HTMLCanvasElement;\n            this.ctx = this.canvas.getContext('2d');\n            this.WIDTH = this.canvas.clientWidth;\n            this.HEIGHT = this.canvas.clientHeight;\n            this.offlineCanvas = document.createElement('canvas');\n            this.offlineCanvas.width = this.WIDTH;\n            this.offlineCanvas.height = this.HEIGHT;\n            this.offlineCtx = this.offlineCanvas.getContext('2d');\n            this.initScreen();\n            if (imgSrc) this.image.src = imgSrc;\n        } else {\n            console.warn('HTMLCanvasElement is required!');\n        }\n    }\n\n    get activeShape() {\n        return this.dataset.find(x => x.active);\n    }\n\n    get scale() {\n        if (this.IMAGE_ORIGIN_WIDTH && this.IMAGE_WIDTH) {\n            return this.IMAGE_WIDTH / this.IMAGE_ORIGIN_WIDTH;\n        }\n        return 1;\n    }\n    /**\n     * 初始化\n     */\n    initScreen() {\n        this.canvas.style.userSelect = 'none';\n        this.canStart = new Promise((resolve) => {\n            if (this.imageLoaded) {\n                resolve(true)\n            } else {\n                this.image.addEventListener('load', () => {\n                    this.emit('load');\n                    this.IMAGE_ORIGIN_WIDTH = this.IMAGE_WIDTH = this.image.width;\n                    this.IMAGE_ORIGIN_HEIGHT = this.IMAGE_HEIGHT = this.image.height;\n                    this.fitZoom();\n                    resolve(true)\n                });\n            }\n        })\n\n        this.canvas.addEventListener('contextmenu', (e) => {\n            if (this.lock) return;\n            e.preventDefault();\n        });\n        this.canvas.addEventListener('mousewheel', (e: WheelEvent) => {\n            if (this.lock) return;\n            e.preventDefault();\n            this.setScale(e.deltaY < 0);\n            const offsetX = e.offsetX / this.scale;\n            const offsetY = e.offsetY / this.scale;\n            this.movePoint = [offsetX, offsetY];\n            this.update()\n        });\n        this.canvas.addEventListener('mousedown', (e: MouseEvent) => {\n            const offsetX = e.offsetX / this.scale;\n            const offsetY = e.offsetY / this.scale;\n            const mousePoint: Point = [e.offsetX, e.offsetY];\n            if (this.lock) return;\n            if (e.buttons === 2) { // 点击鼠标右键\n                this.remmberOrigin = [e.offsetX - this.originX, e.offsetY - this.originY];\n            } else if (e.buttons === 1) {\n                // 点击到控制点\n                const activeShape = this.activeShape;\n                // @ts-ignore\n                const ctrls = activeShape?.ctrlsData || [];\n                this.ctrlIndex = ctrls.findIndex((coor: Point) => this.isPointInCircle(mousePoint, coor, this.ctrlRadius));\n                if (this.ctrlIndex > -1) {\n                    const [x0, y0] = ctrls[this.ctrlIndex];\n                    this.remmber = [[offsetX - x0, offsetY - y0]];\n                    return;\n                }\n                // 是否点击到形状\n                const [targetShapeIndex, targetShape] = this.hoverOnShape(mousePoint);\n                const oncreating = this.activeShape?.type === 2 && (this.activeShape as Polygon).creating;\n                if (!oncreating && targetShapeIndex > -1) {\n                    this.emit('select', targetShape)\n                    this.dataset.forEach((item, i) => {\n                        item.active = i === targetShapeIndex;\n                    });\n                    targetShape.dragging = true;\n                    this.dataset.splice(targetShapeIndex, 1);\n                    this.dataset.push(targetShape);\n                    this.remmber = [];\n                    if (targetShape.type === 3) {\n                        const [x, y] = (targetShape as Dot).coor;\n                        this.remmber = [[offsetX - x, offsetY - y]];\n                    } else {\n                        targetShape.coor.forEach((pt: any) => {\n                            this.remmber.push([offsetX - pt[0], offsetY - pt[1]]);\n                        });\n                    }\n                    this.update();\n                } else if (oncreating) {\n                    // 多边形新增点\n                    if (this.isInContent(e)) {\n                        const pShape = this.activeShape as Polygon;\n                        const [x, y] = pShape.coor[pShape.coor.length - 1];\n                        if (x !== offsetX && y !== offsetY) {\n                            pShape.coor.push([offsetX - this.originX / this.scale, offsetY - this.originY / this.scale]);\n                            this.update();\n                        }\n                    }\n                } else if (this.createType && this.isInContent(e)) {\n                    // 创建矩形/多边形\n                    let newShape;\n                    const curPoint: Point = [offsetX - this.originX / this.scale, offsetY - this.originY / this.scale];\n                    if (this.createType === 1) {\n                        newShape = new Rect([curPoint, curPoint], this.dataset.length);\n                        newShape.creating = true;\n                    } else if (this.createType === 2) {\n                        newShape = new Polygon([curPoint], this.dataset.length);\n                        newShape.creating = true;\n                    } else if (this.createType === 3) {\n                        newShape = new Dot(curPoint, this.dataset.length);\n                        this.emit('add', newShape)\n                    }\n                    this.dataset.forEach((sp) => { sp.active = false; });\n                    newShape.active = true;\n                    this.dataset.push(newShape);\n                    this.emit('updated', newShape)\n                    this.update();\n                } else if (this.activeShape) {\n                    this.activeShape.active = false;\n                    this.update();\n                }\n            }\n        });\n        this.canvas.addEventListener('mousemove', (e: MouseEvent) => {\n            const offsetX = e.offsetX / this.scale;\n            const offsetY = e.offsetY / this.scale;\n            if (this.lock) return;\n            // 记录鼠标位置\n            this.movePoint = [offsetX, offsetY];\n            if (e.buttons === 2 && e.which === 3) {\n                // 拖动背景\n                this.originX = e.offsetX - this.remmberOrigin[0];\n                this.originY = e.offsetY - this.remmberOrigin[1];\n                this.update();\n            } else if (e.buttons === 1) {\n                if (this.activeShape) {\n                    if (this.ctrlIndex > -1 && this.isInContent(e)) {\n                        const [[x, y]] = this.remmber;\n                        // resize矩形\n                        if (this.activeShape.type === 1) {\n                            const [[x0, y0], [x1, y1]] = (this.activeShape as Rect).coor;\n                            let coor: Point[] = [];\n                            switch (this.ctrlIndex) {\n                                case 0:\n                                    coor = [[offsetX - x, offsetY - y], [x1, y1]];\n                                    break;\n                                case 1:\n                                    coor = [[x0, offsetY - y], [x1, y1]];\n                                    break;\n                                case 2:\n                                    coor = [[x0, offsetY - y], [offsetX - x, y1]];\n                                    break;\n                                case 3:\n                                    coor = [[x0, y0], [offsetX - x, y1]];\n                                    break;\n                                case 4:\n                                    coor = [[x0, y0], [offsetX - x, offsetY - y]];\n                                    break;\n                                case 5:\n                                    coor = [[x0, y0], [x1, offsetY - y]];\n                                    break;\n                                case 6:\n                                    coor = [[offsetX - x, y0], [x1, offsetY - y]];\n                                    break;\n                                case 7:\n                                    coor = [[offsetX - x, y0], [x1, y1]];\n                                    break;\n                                default:\n                                    break;\n                            }\n                            const [[a0, b0], [a1, b1]] = coor;\n                            if ((a1 - a0) >= this.MIN_WIDTH && (b1 - b0) >= this.MIN_HEIGHT) {\n                                this.activeShape.coor = coor;\n                            } else {\n                                this.emit('error', `宽不能小于${this.MIN_WIDTH},高不能小于${this.MIN_HEIGHT}。`);\n                            }\n                        } else if (this.activeShape.type === 2) {\n                            this.activeShape.coor.splice(this.ctrlIndex, 1, [offsetX - this.originX / this.scale, offsetY - this.originY / this.scale]);\n                        }\n                        this.update();\n                    } else if (this.activeShape.dragging) {\n                        let coor = [];\n                        const w = this.IMAGE_ORIGIN_WIDTH || this.WIDTH;\n                        const h = this.IMAGE_ORIGIN_HEIGHT || this.HEIGHT;\n                        if (this.activeShape.type === 3) {\n                            const [t1, t2] = this.remmber[0];\n                            const x = offsetX - t1;\n                            const y = offsetY - t2;\n                            if (x < 0 || x > w || y < 0 || y > h) return;\n                            coor = [x, y];\n                        } else {\n                            for (let i = 0; i < this.activeShape.coor.length; i++) {\n                                const tar = this.remmber[i];\n                                const x = offsetX - tar[0];\n                                const y = offsetY - tar[1];\n                                if (x < 0 || x > w || y < 0 || y > h) return;\n                                coor.push([x, y]);\n                            }\n                        }\n                        (this.activeShape as any).coor = coor;\n                        this.update();\n                    } else if ((this.activeShape as Rect).creating && this.activeShape.type === 1 && this.isInContent(e)) {\n                        const x = offsetX - this.originX / this.scale;\n                        const y = offsetY - this.originY / this.scale;\n                        this.activeShape.coor.splice(1, 1, [x, y]);\n                    }\n                    this.emit('updated', this.activeShape)\n                }\n                this.update();\n            } else if (this.activeShape?.type === 2 && (this.activeShape as Polygon)?.creating) {\n                this.update();\n            }\n        });\n        this.canvas.addEventListener('mouseup', (e) => {\n            if (this.lock) return;\n            this.remmber = [];\n            if (this.activeShape) {\n                this.activeShape.dragging = false;\n                if ((this.activeShape as Rect).creating && this.activeShape.type === 1) {\n                    const [[x0, y0], [x1, y1]] = (this.activeShape as Rect).coor;\n                    if (Math.abs(x0 - x1) < this.MIN_WIDTH || Math.abs(y0 - y1) < this.MIN_HEIGHT) {\n                        this.dataset.pop();\n                        this.emit('error', `宽不能小于${this.MIN_WIDTH},高不能小于${this.MIN_HEIGHT}`);\n                    } else {\n                        this.activeShape.coor = [[Math.min(x0, x1), Math.min(y0, y1)], [Math.max(x0, x1), Math.max(y0, y1)]];\n                        (this.activeShape as Rect).creating = false;\n                        this.emit('add', this.activeShape);\n                    }\n                    this.update();\n                }\n            }\n        });\n        this.canvas.addEventListener('dblclick', () => {\n            if (this.lock) return;\n            if (this.activeShape?.type === 2) {\n                if (this.activeShape.coor.length > 2) {\n                    this.emit('add', this.activeShape);\n                    (this.activeShape as Polygon).creating = false;\n                    this.update();\n                }\n            }\n        });\n        document.body.addEventListener('keyup', (e: KeyboardEvent) => {\n            if (this.lock) return;\n            if (this.activeShape) {\n                if (this.activeShape.type === 2) {\n                    if (e.key === 'Escape') {\n                        this.deleteByIndex(this.activeShape.index);\n                    } else if (e.key === 'Backspace') {\n                        if (this.activeShape.coor.length > 1 && (this.activeShape as Polygon).creating) {\n                            this.activeShape.coor.pop();\n                        } else {\n                            this.deleteByIndex(this.activeShape.index);\n                        }\n                    }\n                    this.update();\n                } else if (this.activeShape && e.key === 'Backspace') {\n                    this.deleteByIndex(this.activeShape.index);\n                }\n            }\n\n        });\n    }\n    /**\n     * 设置数据\n     * @param data Array\n     */\n    async setData(data: any[]) {\n        try {\n            await this.canStart\n            data.forEach((item, index) => {\n                if (Object.prototype.toString.call(item).indexOf('Object') > -1) {\n                    const { label, type, coor, strokeStyle, fillStyle, labelFillStyle, labelFont, uuid } = item;\n                    const style = { strokeStyle, fillStyle, labelFillStyle, labelFont }\n                    let shape\n                    switch (type) {\n                        case 1:\n                            shape = new Rect(coor, index, label, style, uuid);\n                            break;\n                        case 2:\n                            shape = new Polygon(coor, index, label, style, uuid);\n                            break;\n                        case 3:\n                            shape = new Dot(coor, index, label, style, uuid);\n                            break;\n                        default:\n                            break;\n                    }\n                    this.dataset.push(shape);\n                } else {\n                    this.emit('error', `${item} in data must be an enumerable Object.`);\n                }\n            });\n            this.update();\n        } catch (error) {\n            this.emit('error', error);\n        }\n    }\n    /**\n     * 判断是非在标注实例上\n     * @param mousePoint 点击位置\n     * @returns \n     */\n    hoverOnShape(mousePoint: Point): [number, Rect | Polygon | Dot] {\n        let targetShapeIndex = -1;\n        const targetShape = this.dataset.reduceRight((target, shape, i) => {\n            if (!target) {\n                if (\n                    (shape.type === 3 && this.isPointInCircle(mousePoint, shape.coor as Point, 3))\n                    || (shape.type === 1 && this.isPointInRect(mousePoint, (shape as Rect).coor))\n                    || (shape.type === 2 && this.isPointInPolygon(mousePoint, (shape as Polygon).coor))\n                ) {\n                    targetShapeIndex = i;\n                    target = shape;\n                }\n            }\n            return target;\n        }, null);\n        return [targetShapeIndex, targetShape];\n    }\n\n    /**\n     * 判断鼠标是否在背景图内部\n     * @param e MouseEvent\n     * @returns 布尔值\n     */\n    isInContent(e: MouseEvent): boolean {\n        const offsetX = e.offsetX / this.scale;\n        const offsetY = e.offsetY / this.scale;\n        return offsetX >= this.originX / this.scale && offsetY >= this.originY / this.scale\n            && offsetX <= this.originX / this.scale + this.IMAGE_ORIGIN_WIDTH && offsetY <= this.originY / this.scale + this.IMAGE_ORIGIN_HEIGHT;\n    }\n    /**\n     * 判断是否在矩形内\n     * @param point 坐标\n     * @param coor 区域坐标\n     * @returns 布尔值\n     */\n    isPointInRect(point: Point, coor: Point[]): boolean {\n        const [x, y] = point;\n        const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\n        return x0 + this.originX <= x && x <= x1 + this.originX && y0 + this.originY <= y && y <= y1 + this.originY;\n    }\n    /**\n     * 判断是否在多边形内\n     * @param point 坐标\n     * @param coor 区域坐标\n     * @returns 布尔值\n     */\n    isPointInPolygon(point: Point, coor: Point[]): boolean {\n        this.offlineCtx.save();\n        this.offlineCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\n        this.offlineCtx.translate(this.originX, this.originY);\n        this.offlineCtx.beginPath();\n        coor.forEach((pt, i) => {\n            const [x, y] = pt.map((a) => Math.round(a * this.scale));\n            if (i === 0) {\n                this.offlineCtx.moveTo(x, y);\n            } else {\n                this.offlineCtx.lineTo(x, y);\n            }\n        });\n        this.offlineCtx.closePath();\n        this.offlineCtx.fill();\n        const areaData = this.offlineCtx.getImageData(0, 0, this.WIDTH, this.HEIGHT);\n        const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\n        this.offlineCtx.restore();\n        return areaData.data[index + 3] !== 0;\n    }\n    /**\n     * 判断是否在圆内\n     * @param point 坐标\n     * @param center 圆心\n     * @param r 半径\n     * @returns 布尔值\n     */\n    isPointInCircle(point: Point, center: Point, r: number): boolean {\n        const [x, y] = point;\n        const [x0, y0] = center.map((a) => a * this.scale);\n        const distance = Math.sqrt((x0 + this.originX - x) ** 2 + (y0 + this.originY - y) ** 2);\n        return distance <= r;\n    }\n    /**\n     * 绘制矩形\n     * @param shape 标注实例\n     * @returns \n     */\n    drawRect(shape: Rect) {\n        if (shape.coor.length !== 2) return;\n        const { labelFillStyle, labelFont, strokeStyle, fillStyle, active, creating, coor, label } = shape\n        const [[x0, y0], [x1, y1]] = coor.map((a: Point) => a.map((b) => Math.round(b * this.scale)));\n        this.ctx.save();\n        this.ctx.fillStyle = fillStyle || this.fillStyle;\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\n        const w = x1 - x0;\n        const h = y1 - y0;\n        this.ctx.strokeRect(x0, y0, w, h);\n        if (!creating) this.ctx.fillRect(x0, y0, w, h);\n        this.ctx.restore();\n        this.drawLabel(coor[0], label, labelFillStyle, labelFont);\n    }\n    /**\n     * 绘制多边形\n     * @param shape 标注实例\n     */\n    drawPolygon(shape: Polygon) {\n        const { labelFillStyle, labelFont, strokeStyle, fillStyle, active, creating, coor, label } = shape\n        this.ctx.save();\n        this.ctx.fillStyle = fillStyle || this.fillStyle;\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\n        this.ctx.beginPath();\n        coor.forEach((el: Point, i) => {\n            const [x, y] = el.map((a) => Math.round(a * this.scale));\n            if (i === 0) {\n                this.ctx.moveTo(x, y);\n            } else {\n                this.ctx.lineTo(x, y);\n            }\n        });\n        if (creating) {\n            const [x, y] = this.movePoint.map((a) => Math.round(a * this.scale));\n            this.ctx.lineTo(x - this.originX, y - this.originY);\n        } else if (coor.length > 2) {\n            this.ctx.closePath();\n        }\n        this.ctx.fill();\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.drawLabel(coor[0], label, labelFillStyle, labelFont);\n    }\n    /**\n     * 绘制点\n     * @param shape 标注实例\n     */\n    drawDot(shape: Dot) {\n        const { labelFillStyle, labelFont, strokeStyle, fillStyle, active, coor, label } = shape\n        const [x, y] = coor.map((a) => a * this.scale);\n        this.ctx.save();\n        this.ctx.fillStyle = fillStyle || this.ctrlFillStyle;\n        this.ctx.strokeStyle = active ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.fill();\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.drawLabel(coor as Point, label, labelFillStyle, labelFont);\n    }\n    /**\n     * 绘制控制点\n     * @param point 坐标\n     */\n    drawCtrl(point: Point) {\n        const [x, y] = point.map((a) => a * this.scale);\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.ctrlFillStyle;\n        this.ctx.strokeStyle = this.ctrlStrokeStyle;\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.fill();\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * 绘制控制点列表\n     * @param shape 标注实例\n     */\n    drawCtrlList(shape: Rect | Polygon) {\n        shape.ctrlsData.forEach((point) => {\n            this.drawCtrl(point);\n        });\n    }\n    /**\n     * 绘制label\n     * @param point 位置\n     * @param label 文本\n     */\n    drawLabel(point: Point, label: string = '', labelFillStyle = '', labelFont = '') {\n        if (label.length) {\n            const newStr = label.length < this.labelMaxLen + 1 ? label : (`${label.substr(0, this.labelMaxLen)}...`);\n            const text = this.ctx.measureText(newStr);\n            const [x, y] = point.map((a) => a * this.scale);\n            const toleft = (this.IMAGE_ORIGIN_WIDTH - point[0]) < (text.width + 4) / this.scale;\n            const toTop = (this.IMAGE_ORIGIN_HEIGHT - point[1]) < 16 / this.scale;\n            this.ctx.save();\n            this.ctx.fillStyle = labelFillStyle || this.labelFillStyle;\n            this.ctx.fillRect(toleft ? (x - text.width - 3) : (x + 1), toTop ? (y - 15) : y + 1, text.width + 4, 16);\n            this.ctx.font = labelFont || this.labelFont;\n            this.ctx.strokeText(newStr, toleft ? (x - text.width - 2) : (x + 2), toTop ? (y - 4) : y + 12, 80);\n            this.ctx.restore();\n        }\n    }\n\n    /**\n     * 绘制背景图片\n     */\n    paintImage() {\n        this.ctx.drawImage(this.image, 0, 0, this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\n    }\n\n    clear() {\n        this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\n    }\n\n    /**\n     * 更新画布\n     */\n    update() {\n        this.ctx.save();\n        this.clear();\n        this.ctx.translate(this.originX, this.originY);\n        this.paintImage();\n        this.dataset.forEach((shape) => {\n            switch (shape.type) {\n                case 1:\n                    this.drawRect(shape as Rect);\n                    break;\n                case 2:\n                    this.drawPolygon(shape as Polygon);\n                    break;\n                case 3:\n                    this.drawDot(shape as Dot);\n                    break;\n                default:\n                    break;\n            }\n        });\n        if (this.activeShape && [1, 2].includes(this.activeShape.type)) {\n            this.drawCtrlList(this.activeShape as Rect | Polygon);\n        }\n        this.ctx.restore();\n    }\n\n    /**\n     * 删除指定矩形\n     * @param index number\n     */\n    deleteByIndex(index: number) {\n        const num = this.dataset.findIndex((x) => x.index === index);\n        if (num > -1) {\n            this.emit('delete', this.dataset[num]);\n            this.dataset.splice(num, 1);\n            this.dataset.forEach((item, i) => { item.index = i; });\n            this.update();\n        }\n    }\n\n    /**\n     * 计算缩放步长\n     * @param init 是否为init\n     */\n    calcStep(init?: boolean) {\n        if (init) {\n            this.scaleStep = 100;\n            this.setScale(false);\n        }\n        if (this.IMAGE_WIDTH > this.WIDTH || this.IMAGE_HEIGHT > this.HEIGHT) {\n            this.setScale(false);\n            this.calcStep();\n        }\n    }\n\n    /**\n     * 缩放\n     * @param type true放大，false，缩小\n     */\n    setScale(type: boolean) {\n        if (this.lock) return;\n        if ((!type && this.IMAGE_WIDTH <= 20) || (type && this.IMAGE_WIDTH >= this.WIDTH * 100)) return;\n        if (type) { this.scaleStep++; } else { this.scaleStep--; }\n        const abs = Math.abs(this.scaleStep);\n        const width = this.IMAGE_WIDTH;\n        this.IMAGE_WIDTH = Math.round(this.IMAGE_ORIGIN_WIDTH * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs);\n        this.IMAGE_HEIGHT = Math.round(this.IMAGE_ORIGIN_HEIGHT * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs);\n        this.stayPosition(this.IMAGE_WIDTH / width);\n        this.update();\n    }\n\n    /**\n     * 适配背景图\n     */\n    fitZoom() {\n        this.calcStep(true);\n        if (this.IMAGE_HEIGHT / this.IMAGE_WIDTH >= this.HEIGHT / this.WIDTH) {\n            this.IMAGE_WIDTH = this.IMAGE_ORIGIN_WIDTH / (this.IMAGE_ORIGIN_HEIGHT / this.HEIGHT);\n            this.IMAGE_HEIGHT = this.HEIGHT;\n        } else {\n            this.IMAGE_WIDTH = this.WIDTH;\n            this.IMAGE_HEIGHT = this.IMAGE_ORIGIN_HEIGHT / (this.IMAGE_ORIGIN_WIDTH / this.WIDTH);\n        }\n        this.originX = (this.WIDTH - this.IMAGE_WIDTH) / 2;\n        this.originY = (this.HEIGHT - this.IMAGE_HEIGHT) / 2;\n        this.update();\n    }\n\n    /**\n     * 保持缩放中心\n     * @param scale nummer\n     */\n    stayPosition(scale: number) {\n        this.originX = this.WIDTH / 2 - (this.WIDTH / 2 - this.originX) * scale;\n        this.originY = this.HEIGHT / 2 - (this.HEIGHT / 2 - this.originY) * scale;\n    }\n}\n\n"],"names":["Shape","index","label","style","uuid","this","coor","strokeStyle","fillStyle","labelFillStyle","labelFont","active","creating","dragging","s","hexDigits","i","substr","Math","floor","random","join","createUuid","Rect","_super","_this","call","type","__extends","Object","defineProperty","prototype","get","_a","__read","_b","x0","y0","_c","x1","y1","Polygon","length","Dot","EventBus","_eventTree","on","eventName","cb","fns","Array","isArray","push","emit","payload","_i","arguments","forEach","fn","apply","__spreadArray","off","find","splice","CanvasSelect","el","imgSrc","lock","MIN_WIDTH","MIN_HEIGHT","activeStrokeStyle","activeFillStyle","ctrlStrokeStyle","ctrlFillStyle","ctrlRadius","labelMaxLen","dataset","remmberOrigin","createType","ctrlIndex","cursor","image","Image","originX","originY","scaleStep","container","document","querySelector","toString","includes","canvas","ctx","getContext","WIDTH","clientWidth","HEIGHT","clientHeight","offlineCanvas","createElement","width","height","offlineCtx","initScreen","src","console","warn","x","IMAGE_ORIGIN_WIDTH","IMAGE_WIDTH","userSelect","canStart","Promise","resolve","imageLoaded","addEventListener","IMAGE_ORIGIN_HEIGHT","IMAGE_HEIGHT","fitZoom","e","preventDefault","setScale","deltaY","offsetX","scale","offsetY","movePoint","update","mousePoint","buttons","activeShape","ctrls","ctrlsData","findIndex","isPointInCircle","remmber","hoverOnShape","targetShapeIndex_1","targetShape","oncreating","item","_d","y","pt","isInContent","pShape","_e","newShape","curPoint","sp","which","_f","_g","_h","_j","a0","b0","_k","a1","b1","concat","w","h","_l","t1","tar","abs","pop","min","max","body","key","deleteByIndex","setData","data","sent","indexOf","shape","error_1","targetShapeIndex","reduceRight","target","isPointInRect","isPointInPolygon","point","map","a","b","save","clearRect","translate","beginPath","round","moveTo","lineTo","closePath","fill","areaData","getImageData","restore","center","r","sqrt","pow","drawRect","strokeRect","fillRect","drawLabel","drawPolygon","stroke","drawDot","arc","PI","drawCtrl","drawCtrlList","newStr","text","measureText","toleft","toTop","font","strokeText","paintImage","drawImage","clear","num","calcStep","init","stayPosition"],"mappings":"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"}